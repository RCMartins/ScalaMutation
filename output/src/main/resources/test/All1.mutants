{"id":1,"diff":"@@ -6,5 +6,5 @@ Blinky.filesToMutate = [all]\n package test\n \n object All1 {\n-  val op: Option[String] = Some(\"string\").orElse(Some(\"test\")).filter(str => str.length < 3 * 2)\n+  val op: Option[String] = Some(\"string\").orElse(Some(\"test\"))\n }","fileName":"test/All1.scala","original":"Some(\"string\").orElse(Some(\"test\")).filter(str => str.length < 3 * 2)","mutated":"Some(\"string\").orElse(Some(\"test\"))"}
{"id":2,"diff":"@@ -6,5 +6,5 @@ Blinky.filesToMutate = [all]\n package test\n \n object All1 {\n-  val op: Option[String] = Some(\"string\").orElse(Some(\"test\")).filter(str => str.length < 3 * 2)\n+  val op: Option[String] = Some(\"string\").orElse(Some(\"test\")).filterNot(str => str.length < 3 * 2)\n }","fileName":"test/All1.scala","original":"Some(\"string\").orElse(Some(\"test\")).filter(str => str.length < 3 * 2)","mutated":"Some(\"string\").orElse(Some(\"test\")).filterNot(str => str.length < 3 * 2)"}
{"id":3,"diff":"@@ -6,5 +6,5 @@ Blinky.filesToMutate = [all]\n package test\n \n object All1 {\n-  val op: Option[String] = Some(\"string\").orElse(Some(\"test\")).filter(str => str.length < 3 * 2)\n+  val op: Option[String] = Some(\"string\").filter(str => str.length < 3 * 2)\n }","fileName":"test/All1.scala","original":"Some(\"string\").orElse(Some(\"test\")).filter(str => str.length < 3 * 2)","mutated":"Some(\"string\").filter(str => str.length < 3 * 2)"}
{"id":4,"diff":"@@ -6,5 +6,5 @@ Blinky.filesToMutate = [all]\n package test\n \n object All1 {\n-  val op: Option[String] = Some(\"string\").orElse(Some(\"test\")).filter(str => str.length < 3 * 2)\n+  val op: Option[String] = Some(\"test\").filter(str => str.length < 3 * 2)\n }","fileName":"test/All1.scala","original":"Some(\"string\").orElse(Some(\"test\")).filter(str => str.length < 3 * 2)","mutated":"Some(\"test\").filter(str => str.length < 3 * 2)"}
{"id":5,"diff":"@@ -6,5 +6,5 @@ Blinky.filesToMutate = [all]\n package test\n \n object All1 {\n-  val op: Option[String] = Some(\"string\").orElse(Some(\"test\")).filter(str => str.length < 3 * 2)\n+  val op: Option[String] = Some(\"\").orElse(Some(\"test\")).filter(str => str.length < 3 * 2)\n }","fileName":"test/All1.scala","original":"Some(\"string\").orElse(Some(\"test\")).filter(str => str.length < 3 * 2)","mutated":"Some(\"\").orElse(Some(\"test\")).filter(str => str.length < 3 * 2)"}
{"id":6,"diff":"@@ -6,5 +6,5 @@ Blinky.filesToMutate = [all]\n package test\n \n object All1 {\n-  val op: Option[String] = Some(\"string\").orElse(Some(\"test\")).filter(str => str.length < 3 * 2)\n+  val op: Option[String] = Some(\"mutated!\").orElse(Some(\"test\")).filter(str => str.length < 3 * 2)\n }","fileName":"test/All1.scala","original":"Some(\"string\").orElse(Some(\"test\")).filter(str => str.length < 3 * 2)","mutated":"Some(\"mutated!\").orElse(Some(\"test\")).filter(str => str.length < 3 * 2)"}
{"id":7,"diff":"@@ -6,5 +6,5 @@ Blinky.filesToMutate = [all]\n package test\n \n object All1 {\n-  val op: Option[String] = Some(\"string\").orElse(Some(\"test\")).filter(str => str.length < 3 * 2)\n+  val op: Option[String] = Some(\"string\").orElse(Some(\"\")).filter(str => str.length < 3 * 2)\n }","fileName":"test/All1.scala","original":"Some(\"string\").orElse(Some(\"test\")).filter(str => str.length < 3 * 2)","mutated":"Some(\"string\").orElse(Some(\"\")).filter(str => str.length < 3 * 2)"}
{"id":8,"diff":"@@ -6,5 +6,5 @@ Blinky.filesToMutate = [all]\n package test\n \n object All1 {\n-  val op: Option[String] = Some(\"string\").orElse(Some(\"test\")).filter(str => str.length < 3 * 2)\n+  val op: Option[String] = Some(\"string\").orElse(Some(\"mutated!\")).filter(str => str.length < 3 * 2)\n }","fileName":"test/All1.scala","original":"Some(\"string\").orElse(Some(\"test\")).filter(str => str.length < 3 * 2)","mutated":"Some(\"string\").orElse(Some(\"mutated!\")).filter(str => str.length < 3 * 2)"}
{"id":9,"diff":"@@ -6,5 +6,5 @@ Blinky.filesToMutate = [all]\n package test\n \n object All1 {\n-  val op: Option[String] = Some(\"string\").orElse(Some(\"test\")).filter(str => str.length < 3 * 2)\n+  val op: Option[String] = Some(\"string\").orElse(Some(\"test\")).filter(str => str.length < 3 / 2)\n }","fileName":"test/All1.scala","original":"Some(\"string\").orElse(Some(\"test\")).filter(str => str.length < 3 * 2)","mutated":"Some(\"string\").orElse(Some(\"test\")).filter(str => str.length < 3 / 2)"}